library ieee;
use ieee.numeric_std.all;
use ieee.std_logic_1164.all;

entity top_synth is
  port(
    CLOCK_50 : in  std_logic;
    HEX3     : out std_logic_vector(0 to 6);
    HEX2     : out std_logic_vector(0 to 6);
    HEX1     : out std_logic_vector(0 to 6);
    HEX0     : out std_logic_vector(0 to 6)
    );
end top-synth;

architecture top_synth of top_synth is
  component imem is
    port(im_addr  : in  unsigned(10 downto 1);
         im_instr : out unsigned(15 downto 0);
         clock    : in  std_logic);
  end component;
  component dmem is
    port(dm_addr    : in  unsigned(10 downto 2);
         dm_data_wr : in  unsigned(31 downto 0);
         dm_data_rd : out unsigned(31 downto 0);
         dm_we      : in  std_logic;
         clock      : in  std_logic;
			dm_data_out : out unsigned(31 downto 0)
			);
  end component;
  component rfile is
    port(radr1, radr2, radr3, wadr : in  unsigned(3 downto 0);
         wdata                     : in  unsigned(31 downto 0);
         rdata1, rdata2, rdata3    : out unsigned(31 downto 0);
         write                     : in  std_logic;
         clock                     : in  std_logic);
  end component;
  component Pipeline is
    port(
      clock                     : in     std_logic;
      im_instr                  : in     unsigned(15 downto 0);
      im_addr                   : buffer unsigned(31 downto 1);
      dm_data_rd                : in     unsigned(31 downto 0);
      dm_addr                   : out    unsigned(31 downto 2);
      dm_data_wr                : out    unsigned(31 downto 0);
      dm_we                     : out    std_logic;
      radr1, radr2, radr3, wadr : buffer unsigned(3 downto 0);
      wdata                     : buffer unsigned(31 downto 0);
      rdata1, rdata2, rdata3    : in     unsigned(31 downto 0);
      rf_wr                     : out    std_logic
      );
  end component;
  component HexDecoder is
    port(
      VAL_IN   : in  std_logic_vector(3 downto 0);
      DATA_OUT : out std_logic_vector(0 to 6)
      );
  end component HexDecoder;
  component Interceptor is
    port(
    addr     : in  unsigned(10 downto 2);
    data     : in  unsigned(31 downto 0);
    data_out : out unsigned(31 downto 0)
    );
  end component;

  signal im_addr                       : unsigned(31 downto 1);
  signal im_instr                      : unsigned(15 downto 0);
  signal dm_addr                       : unsigned(31 downto 2);
  signal dm_data_wr                    : unsigned(31 downto 0);
  signal dm_data_rd                    : unsigned(31 downto 0);
  signal dm_data_out                   : unsigned(31 downto 0);
  signal dm_we                         : std_logic;
  signal radr1, radr2, radr3, wadr     : unsigned(3 downto 0);
  signal wdata, rdata1, rdata2, rdata3 : unsigned(31 downto 0);
  signal rf_wr                         : std_logic;
  signal clock                         : std_logic := '1';

  signal intercept_out : unsigned(31 downto 0);

-- Hex outs
  signal HexOut0, HexOut1, HexOut2, HexOut3 : std_logic_vector(0 to 6);

begin
  clock <= CLOCK_50;

  HEX3 <= HexOut3;
  HEX2 <= HexOut2;
  HEX1 <= HexOut1;
  HEX0 <= HexOut0;

  cpu_pipeline : Pipeline port map(clock, im_instr, im_addr, dm_data_rd, dm_addr, dm_data_wr, dm_we, radr1, radr2, radr3, wadr, wdata, rdata1, rdata2, rdata3, rf_wr);

  data_mem  : dmem port map(dm_addr(10 downto 2), dm_data_wr, dm_data_rd, dm_we, clock, dm_data_out);
  prog_mem  : imem port map(im_addr(10 downto 1), im_instr, clock);
  rfile_mem : rfile port map(radr1, radr2, radr3, wadr, wdata, rdata1, rdata2, rdata3, rf_wr, clock);

  intercept : Interceptor port map(dm_addr(10 downto 2), dm_data_out, intercept_out);

  hex0_comp : HexDecoder port map(std_logic_vector(intercept_out(3 downto 0)), HexOut0);

end top_synth;
